import Form from "@/components/Form";
import FormError from "@/components/FormError";
import FormSuccess from "@/components/FormSuccess";
import { normalizeForm } from "@/libs/normalizeForm";
import { fetchFormFields, submitForm } from "@/services/form";
import { useFormStore } from "@/store/form";
import {
  Box,
  Card,
  Container,
  LinearProgress,
  Toolbar,
  Typography,
} from "@mui/material";
import { useMutation, useQuery } from "@tanstack/react-query";
import Head from "next/head";
import {
  ChangeEvent,
  useCallback,
  useEffect,
  useMemo,
  useState,
} from "react";
import throttle from "lodash.throttle";

export default function Home() {
  const [submitted, setSubmitted] = useState(false);
  const [errorMessage, setErrorMessage] = useState<Error | null>(null);

  const { data, isFetching, error, refetch } = useQuery({
    queryKey: ["form-fields"],
    queryFn: fetchFormFields,
  });

  const {
    isPending: isSubmitting,
    data: submitResponse,
    mutate,
  } = useMutation({
    mutationFn: submitForm,
    onSuccess: () => setSubmitted(true),
    onError: (err) => setErrorMessage(err),
  });

  const isLoading = useMemo(
    () => isFetching || isSubmitting,
    [isFetching, isSubmitting]
  );

  const { fields, setForm, setFieldValue } = useFormStore();

  const onChange = (e: ChangeEvent<HTMLInputElement>) => {
    setFieldValue({ fieldName: e.target.name, value: e.target.value });
  };

  const onSubmit = useCallback(
    () => throttle(() => {
      window.scrollTo({ top: 0, behavior: "smooth" });
      mutate(normalizeForm(fields));
    }, 1000),
    [fields, mutate]
  );

  const onRefetch = useCallback(
    () => throttle(() => {
      setErrorMessage(null);
      refetch();
    }, 1000),
    [refetch]
  );

  useEffect(() => {
    if (data?.length) {
      setForm(data);
    }
  }, [data, setForm]);

  useEffect(() => {
    setErrorMessage(error);
  }, [error]);

  return (
    <>
      <Head>
        <title>Ulventech - Dynamic Form</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container sx={{ p: 2 }} maxWidth="sm">
          <Card sx={{ backgroundColor: "#efefef" }}>
            <Toolbar
              sx={{ backgroundColor: (theme) => theme.palette.primary.main }}
            >
              <Typography sx={{ fontSize: 18, color: "#fff" }}>
                Ulventech - Dynamic Form
              </Typography>
            </Toolbar>

            {isLoading && <LinearProgress color="warning" />}

            <Box sx={{ p: 2 }}>
              {errorMessage ? (
                <FormError
                  message={errorMessage.toString()}
                  isLoading={isLoading}
                  onRefetch={onRefetch()}
                />
              ) : !submitted ? (
                <Form
                  isLoading={isLoading}
                  fields={fields}
                  onChange={onChange}
                  onRefetch={onRefetch()}
                  onSubmit={onSubmit()}
                />
              ) : (
                submitResponse?.success && (
                  <FormSuccess
                    message={submitResponse.message}
                    fields={submitResponse.data}
                    isLoading={isLoading}
                    onRefetch={() => {
                      setSubmitted(false);
                      const refresh = onRefetch();
                      refresh()
                    }}
                  />
                )
              )}
            </Box>
          </Card>
        </Container>
      </main>
    </>
  );
}
